{"version":3,"file":"property-converter.js","sourceRoot":"","sources":["../../src/utilities/property-converter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;AAGhE,MAAM,CAAC,MAAM,iBAAiB,GAAsB;IAEhD,WAAW,CAAE,IAAY,EAAE,KAAU,EAAE,IAAe;QAExD,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAE,KAAK,CAAE,CAAC;QACxD,MAAM,gCAAgC,GAAG,eAAe,CAAE,IAAI,CAAE,CAAC;QAEjE,IAAI,cAAc,GAAG,KAAK,CAAC;QAE3B,QAAS,SAAS,EAAG;YAEpB,KAAK,SAAS;gBACb,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;gBACnC,MAAM;YACP,KAAK,QAAQ,CAAC;YACd,KAAK,OAAO;gBACX,cAAc,GAAG,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,sCAAsC;gBACtG,MAAM;SAEP;QAED,OAAO;YACN,KAAK,EAAE,cAAc;YACrB,IAAI,EAAE,gCAAgC;SACtC,CAAC;IAEA,CAAC;IAED,UAAU,CAAE,IAAY,EAAE,KAAU,EAAE,IAAe;QAEvD,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAE,KAAK,CAAE,CAAC;QACxD,MAAM,gCAAgC,GAAG,eAAe,CAAE,IAAI,CAAE,CAAC;QAEjE,IAAI,cAAc,GAAG,KAAK,CAAC;QAExB,QAAS,SAAS,EAAG;YAElB,KAAK,SAAS;gBAChB,cAAc,GAAG,KAAK,KAAK,IAAI,CAAC;gBAChC,MAAM;YACD,KAAK,QAAQ;gBAClB,cAAc,GAAG,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvD,MAAM;YACD,KAAK,QAAQ,CAAC;YACd,KAAK,OAAO;gBACjB,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,KAAM,CAAC,CAAC;gBACpC,MAAM;SAEH;QAEJ,OAAO;YACT,KAAK,EAAE,cAAc;YACrB,IAAI,EAAE,gCAAgC;SACtC,CAAC;IAEA,CAAC;CAEJ,CAAC;AAEF,SAAS,cAAc,CAAE,KAAU;IAElC,IAAK,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAE,KAAK,CAAE,EAAG;QAC3D,OAAO,QAAQ,CAAC;KAChB;IAED,IAAI,KAAK,CAAC,OAAO,CAAE,KAAK,CAAE,EAAG;QACzB,OAAO,OAAO,CAAC;KAClB;IAED,IAAI,OAAO,KAAK,KAAK,SAAS,EAAG;QAChC,OAAO,SAAS,CAAC;KACjB;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAG;QAC/B,OAAO,QAAQ,CAAC;KAChB;IAED,OAAO,QAAQ,CAAC;AAEjB,CAAC","sourcesContent":["import { camelCaseToDash, dashToCamelCase } from './camel-case';\nimport { PropertyConverter, ConvertedOptions, TypeHint } from '../declarations';\n\nexport const propertyConverter: PropertyConverter = {\n\n    toAttribute( name: string, value: any, type?: TypeHint ) : ConvertedOptions {\n\n\t\tconst valueType = type ? type : getTypeOfValue( value );\n\t\tconst convertedPropertyToAttributeName = camelCaseToDash( name );\n\n\t\tlet convertedValue = value;\n\n\t\tswitch ( valueType ) {\n\n\t\t\tcase 'Boolean':\n\t\t\t\tconvertedValue = value ? '' : null;\n\t\t\t\tbreak;\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\tconvertedValue = value == null ? value : JSON.stringify(value); // Check if value is undefined or null\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn {\n\t\t\tvalue: convertedValue,\n\t\t\tname: convertedPropertyToAttributeName\n\t\t};\n\n    },\n\n    toProperty( name: string, value: any, type?: TypeHint ): ConvertedOptions {\n\n\t\tconst valuetype = type ? type : getTypeOfValue( value );\n\t\tconst convertedAttributeToPropertyName = dashToCamelCase( name );\n\n\t\tlet convertedValue = value;\n\n    \tswitch ( valuetype ) {\n\n      \t\tcase 'Boolean':\n\t\t\t  \tconvertedValue = value !== null;\n\t\t\t  \tbreak;\n          \tcase 'Number':\n\t\t\t  \tconvertedValue = value === null ? null : Number(value);\n\t\t\t  \tbreak;\n          \tcase 'Object':\n          \tcase 'Array':\n\t\t\t  \tconvertedValue = JSON.parse(value!);\n\t\t\t  \tbreak;\n\n        }\n\n    \treturn {\n\t\t\tvalue: convertedValue,\n\t\t\tname: convertedAttributeToPropertyName\n\t\t};\n\n    }\n\n};\n\nfunction getTypeOfValue( value: any ) {\n\n\tif ( typeof value === 'object' && !Array.isArray( value ) ) {\n\t\treturn 'Object';\n\t}\n\n\tif( Array.isArray( value ) ) {\n\t    return 'Array';\n\t}\n\n\tif( typeof value === 'boolean' ) {\n\t\treturn 'Boolean';\n\t}\n\n\tif( typeof value === 'number' ) {\n\t\treturn 'Number';\n\t}\n\n\treturn 'String';\n\n}"]}