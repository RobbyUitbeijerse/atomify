{"version":3,"file":"delegate.js","sourceRoot":"","sources":["../../src/utilities/delegate.ts"],"names":[],"mappings":"AAeA,SAAS,SAAS,CAAE,OAAwB;IAExC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC;IAEzE,MAAM,UAAU,GAAG,CAAE,KAAqB,EAAG,EAAE;QAE3C,MAAM,cAAc,GAAI,KAAK,CAAC,MAAkB,CAAC,OAAO,CAAE,QAAQ,CAAE,CAAC;QAE3E,IAAK,CAAC,cAAc;YAAG,OAAO;QAE9B,KAAK,CAAC,cAAc,GAAG,cAAc,CAAC;QAEtC,IAAO,KAAK,CAAC,aAA0B,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,EAAG;YAE/D,QAAQ,CAAC,IAAI,CAAE,MAAM,EAAE,KAAK,CAAE,CAAC;SAElC;IAER,CAAC,CAAC;IAEG,MAAe,CAAC,gBAAgB,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,CAAE,CAAC;IAElE,OAAO;QACH,OAAO;YACD,MAAe,CAAC,mBAAmB,CAAE,IAAI,EAAE,UAAU,EAAE,UAAU,CAAE,CAAC;QAC1E,CAAC;KACJ,CAAA;AAEL,CAAC;AAED;;EAEE;AACF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAE,OAAwB,EAAG,EAAE;IAEnD,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAElC,IAAK,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,UAAU,EAAG;QAEzD,OAAO,SAAS,mBAAM,OAAO,IAAE,MAAM,IAAG,CAAC;KAE/C;IAED,IAAK,OAAO,MAAM,KAAK,QAAQ,EAAG;QAE3B,OAAO,KAAK,CAAC,IAAI,CAAE,QAAQ,CAAC,gBAAgB,CAAE,MAAM,CAAE,CAAE;aACnD,GAAG,CAAE,CAAE,OAAoB,EAAG,EAAE,CAAC,SAAS,mBAAM,OAAO,IAAE,MAAM,EAAE,OAAO,IAAG,CAAE,CAAC;KAEzF;IAEE,OAAO,IAAI,CAAC;AAEhB,CAAC,CAAC","sourcesContent":["interface DelegatedEvent extends Event {\n    delegateTarget: Element;\n}\n\ninterface SharedOptions {\n    selector: string;\n    type: string;\n    callback: ( event: Event ) => void;\n    useCapture?: boolean;\n}\n\ninterface DelegateOptions extends SharedOptions {\n    target: EventTarget\n}\n\nfunction _delegate( options: DelegateOptions ) {\n\n    const { target, selector, type, callback, useCapture = false } = options;\n\n    const listenerFn = ( event: DelegatedEvent ) => {\n\n        const delegateTarget = (event.target as Element).closest( selector );\n\n\t\tif ( !delegateTarget ) return;\n\n\t\tevent.delegateTarget = delegateTarget;\n\n\t\tif ( ( event.currentTarget as Element ).contains(event.delegateTarget) ) {\n\n            callback.call( target, event );\n\n        }\n\n\t};\n\n    ( target as any ).addEventListener(type, listenerFn, useCapture );\n\n    return {\n        destroy() {\n            ( target as any ).removeEventListener( type, listenerFn, useCapture );\n        }\n    }\n\n}\n\n/**\n    * Lightweight event delegation.\n*/\nexport const delegate = ( options: DelegateOptions ) => {\n\n    let { target, type } = options;\n\n\tif ( typeof target === 'object' || typeof type === 'function' ) {\n\n        return _delegate({ ...options, target });\n\n\t}\n\n\tif ( typeof target === 'string' ) {\n\n        return Array.from( document.querySelectorAll( target ) )\n            .map( ( element: EventTarget ) => _delegate({ ...options, target: element }) );\n\n\t}\n\n    return null;\n\n};"]}