{"version":3,"file":"styles.js","sourceRoot":"","sources":["../../src/component/styles.ts"],"names":[],"mappings":"AAEA;;EAEE;AACF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAE,MAA4B,EAAE,OAAyB,EAAG,EAAE;IAExF,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAC5B,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAE9B,IAAI,KAAK,IAAI,MAAM;QAAG,MAAM,IAAI,KAAK,CAAC,cAAe,MAAM,CAAC,UAAW,2DAA2D,CAAC,CAAC;IAEpI,IAAI,KAAK;QAAG,OAAO,KAAK,CAAC;IACzB,IAAI,MAAM;QAAG,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEpC,OAAO,KAAK,CAAC;AAEjB,CAAC,CAAC;AAEF;;;EAGE;AACF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAE,MAA4B,EAAE,KAAkB,EAAG,EAAE;IAEzF,MAAM,aAAa,GAAG,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IAE7C,IAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,aAAa,IAAI,CAAC,EAAG;QAE9D,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAEtD,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,aAAa,EAAE,CAAC,CAAC;QACxD,aAAa,CAAC,SAAS,GAAG,GAAI,KAAM,EAAE,CAAC;QACvC,aAAa,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,aAAa,EAAE,CAAC,CAAC;QAEzF,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAE,aAAa,CAAE,CAAC;KAE9C;AAEL,CAAC,CAAC","sourcesContent":["import { ComponentOptions, ComponentConstructor, StyleString } from '../declarations';\n\n/*\n    * Generates (concats) styling based upon the style string and styles array given by the component.\n*/\nexport const generateStyles = ( target: ComponentConstructor, options: ComponentOptions ) => {\n\n    const style = options.style;\n    const styles = options.styles;\n\n    if( style && styles ) throw new Error(`Component: ${ target.__nodeName } can only have on type of style property: styles or style`);\n\n    if( style ) return style;\n    if( styles ) return styles.join('');\n\n    return false;\n\n};\n\n/*\n    * This is being used when the shadowdom option is being disabled.\n    * Creates styling element based upon the options set by the component.\n*/\nexport const generateGeneralStyling = ( target: ComponentConstructor, style: StyleString ) => {\n\n    const componentName = `${target.__nodeName}`;\n\n    if ( !document.head.querySelector(`[scope=\"${componentName}\"]`) ) {\n\n        const styleTemplate = document.createElement('style');\n\n        styleTemplate.setAttribute('scope', `${componentName}`);\n        styleTemplate.innerText = `${ style }`;\n        styleTemplate.innerText = styleTemplate.innerText.replace(/:host/gi, `${componentName}`);\n\n        document.head.appendChild( styleTemplate );\n\n    }\n\n};"]}