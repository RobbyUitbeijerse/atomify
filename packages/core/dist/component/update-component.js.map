{"version":3,"file":"update-component.js","sourceRoot":"","sources":["../../src/component/update-component.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,sBAAsB,EAAE,MAAM,cAAc,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD;;;;;GAKG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAE,MAA4B,EAAE,OAAyB,EAAE,WAAoB,KAAK,EAAiB,EAAE;IAElI,OAAO,IAAI,OAAO,CAAE,KAAK,EAAE,OAAO,EAAG,EAAE;QAEnC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,GAAG,cAAc,CAAE,MAAM,EAAE,OAAO,CAAE,CAAC;QAE/E,kDAAkD;QAClD,6CAA6C;QAC7C,IAAI,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAG;YAE5B,sBAAsB,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC;SAE5C;QAAA,CAAC;QAEF,iDAAiD;QACjD,IACI,MAAM,CAAC,sBAAsB;YAC7B,OAAO,CAAC,MAAM;YACd,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC,EAChE;YAEE,aAAa,CAAE,MAAM,EAAE,QAAQ,CAAE,CAAC;SAErC;QAED,yBAAyB;QACzB,MAAM,WAAW,GAAG,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,CAAC;QACzE,MAAM,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAE,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAE,CAAC;QAE5D,IAAI,QAAQ,EAAG;YAET,MAAM,CAAC,UAAmB,CAAC,SAAS,GAAG,EAAE,CAAC;SAE/C;QAED,MAAM,CAAC,UAAU,CAAC,WAAW,CAAE,KAAK,CAAE,CAAC;QAEvC,IAAI,WAAW,EAAG;YAEd,MAAM,CAAC,UAAU,CAAC,WAAW,CAAE,cAAc,CAAE,CAAC;SAEnD;QAGD,OAAO,OAAO,EAAE,CAAC;IAErB,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,KAAK,EAAG,MAA4B,EAAE,QAAa,EAAE,MAAc,EAAG,EAAE;IAE5F,IAAK,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAG;QAEhC,MAAM,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAE,MAAM,CAAE,CAAC;KAEzC;AAEL,CAAC,CAAC;AAEF;;;;;GAKG;AACH,SAAS,aAAa,CAAE,MAA4B,EAAE,QAA6B;IAE/E,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAE,QAAQ,EAAE,MAAM,CAAC,UAAU,CAAE,CAAC;IAC/D,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAE,MAAM,CAAE,CAAC;AAE3C,CAAC","sourcesContent":["import { ComponentConstructor, ComponentOptions } from '../declarations';\nimport { generateGeneralStyling } from '../component';\nimport { renderTemplate } from './render-template';\n\n/**\n    * Generates a styling string thats being used in the update function of the Component.\n    * The string is generated based on the option given in de @Component decorator.\n    * @param {ComponentConstructor} target\n    * @param {ComponentOptions} options\n**/\nexport const updateComponent = ( target: ComponentConstructor, options: ComponentOptions, reRender: boolean = false ): Promise<any> => {\n\n    return new Promise( async( resolve ) => {\n\n        const { styles, template, templateResult } = renderTemplate( target, options );\n\n        // Checks if styling and shadow dom is not allowed\n        // and adds the styling to the document head.\n        if( styles && !options.shadow ) {\n\n            generateGeneralStyling( target, styles );\n\n        };\n\n        // Check if the shadow DOM polyfill is available.\n        if(\n            target.__hasShadowdomPolyfill &&\n            options.shadow &&\n            !document.head.querySelector(`[scope=\"${target.__nodeName}\"]`)\n        ) {\n\n            bindShadyRoot( target, template );\n\n        }\n\n        // Append rendered target\n        const isJSXResult = templateResult && typeof templateResult === 'object';\n        const nodes = document.importNode( template.content, true );\n\n        if( reRender ) {\n\n            ( target.renderRoot as any ).innerHTML = '';\n\n        }\n\n        target.renderRoot.appendChild( nodes );\n\n        if( isJSXResult ) {\n\n            target.renderRoot.appendChild( templateResult );\n\n        }\n\n\n        return resolve();\n\n    });\n\n};\n\nexport const safeCall = async ( target: ComponentConstructor, instance: any, method: string ) => {\n\n    if ( instance && instance[method] ) {\n\n        await instance[method].call( target );\n\n    }\n\n};\n\n/**\n    * Generates a template based necessary fallbacks needed for browsers that do not support Custom elements or ShadowDom\n    * Reference: https://github.com/webcomponents/webcomponentsjs\n    * @param {ComponentConstructor} target\n    * @param {HTMLTemplateElement} template\n */\nfunction bindShadyRoot( target: ComponentConstructor, template: HTMLTemplateElement ) {\n\n    window.ShadyCSS.prepareTemplate( template, target.__nodeName );\n    window.ShadyCSS.styleElement( target );\n\n}"]}