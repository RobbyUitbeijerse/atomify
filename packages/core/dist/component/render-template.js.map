{"version":3,"file":"render-template.js","sourceRoot":"","sources":["../../src/component/render-template.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,GAAG,CAAC;AAEnC,MAAM,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;AAEhC;;;EAGE;AACF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAE,MAA4B,EAAE,OAAyB,EAAmB,EAAE;IAExG,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;IACxD,MAAM,gBAAgB,GAAG,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,CAAC;IAE9E,8EAA8E;IAC9E,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,MAAM,CAAC,UAAU,CAAE,EAAG;QAE1C,MAAM,eAAe,GAAG,cAAc,CAAE,MAAM,EAAE,OAAO,CAAE,CAAC;QAC1D,MAAM,eAAe,GAAG,eAAe,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,eAAe,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;QACrG,MAAM,iBAAiB,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAE7D,aAAa,CAAC,GAAG,CAAE,MAAM,CAAC,UAAU,EAAE;YAClC,MAAM,EAAE,eAAe;YACvB,QAAQ,EAAE,iBAAiB;YAC3B,eAAe;SAClB,CAAC,CAAC;QAEH,iBAAiB,CAAC,SAAS,GAAG;cACvB,eAAgB;cAChB,gBAAgB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAG;SAC7C,CAAC;QAEF,qDAAqD;QACrD,OAAO;YACH,MAAM,EAAE,eAAe;YACvB,QAAQ,EAAE,iBAAiB;YAC3B,cAAc;SACjB,CAAC;KAEL;SAAM;QAEH,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,aAAa,CAAC,GAAG,CAAE,MAAM,CAAC,UAAU,CAAE,CAAC;QAErF,QAAQ,CAAC,SAAS,GAAG;cACd,eAAe,KAAK,EAAE,CAAC,CAAC,CAAC,UAAU,eAAe,UAAU,CAAC,CAAC,CAAC,EAAG;cAClE,gBAAgB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAG;SAC7C,CAAC;QAEF,qDAAqD;QACrD,OAAO;YACH,MAAM;YACN,QAAQ;YACR,cAAc;SACjB,CAAC;KAEL;AAEL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAE,MAAW,EAAG,EAAE;IAE5C,OAAO,IAAI,OAAO,CAAC,CAAE,OAAO,EAAG,EAAE;QAE7B,MAAM,CAAC,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC;QACjC,OAAO,EAAE,CAAC;IAEd,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC","sourcesContent":["import { ComponentConstructor, ComponentOptions, RenderTemplate } from '../declarations';\nimport { generateStyles } from '.';\n\nconst templateCache = new Map();\n\n/*\n    * Generates styling and a template string to render the component.\n    * The render template function caches the template and return the template and styling if its cached.\n*/\nexport const renderTemplate = ( target: ComponentConstructor, options: ComponentOptions ): RenderTemplate => {\n\n    const templateResult = target.render && target.render();\n    const isTemplateString = templateResult && typeof templateResult === 'string';\n\n    // Check if styles and template are cached otherwise create a cached template.\n    if( !templateCache.has( target.__nodeName ) ) {\n\n        const generatedStyles = generateStyles( target, options );\n        const componentStyles = generatedStyles && options.shadow ? `<style>${generatedStyles}</style>` : '';\n        const componentTemplate = document.createElement('template');\n\n        templateCache.set( target.__nodeName, {\n            styles: generatedStyles,\n            template: componentTemplate,\n            componentStyles\n        });\n\n        componentTemplate.innerHTML = `\n            ${ componentStyles }\n            ${ isTemplateString ? templateResult : '' }\n        `;\n\n        // Return styles and template to update the component\n        return {\n            styles: generatedStyles,\n            template: componentTemplate,\n            templateResult\n        };\n\n    } else {\n\n        const { styles, template, componentStyles } = templateCache.get( target.__nodeName );\n\n        template.innerHTML = `\n            ${ componentStyles !== '' ? `<style>${componentStyles}</style>` : '' }\n            ${ isTemplateString ? templateResult : '' }\n        `;\n\n        // Return styles and template to update the component\n        return {\n            styles,\n            template,\n            templateResult\n        };\n\n    }\n\n};\n\nexport const removeTemplate = ( target: any ) => {\n\n    return new Promise(( resolve ) => {\n\n        target.renderRoot.innerHTML = '';\n        resolve();\n\n    });\n\n};"]}