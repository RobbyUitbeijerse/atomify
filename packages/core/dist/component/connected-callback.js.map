{"version":3,"file":"connected-callback.js","sourceRoot":"","sources":["../../src/component/connected-callback.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,8BAA8B,EAAE,uBAAuB,EAAE,MAAM,eAAe,CAAC;AACxF,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAEnE,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,MAA4B,EAAE,OAAyB,EAAE,QAAa,EAAG,EAAE;IAE/G,MAAM,CAAC,iBAAiB,CAAC,GAAG,KAAK,EAAO,CAAC;IAEzC,4FAA4F;IAC5F,IAAI,MAAM,CAAC,gBAAgB,CAAC,EAAG;QAC3B,MAAM,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC;KAC1C;IAED,MAAM,QAAQ,CAAE,MAAM,EAAE,QAAQ,EAAE,mBAAmB,CAAE,CAAC;IACxD,MAAM,QAAQ,CAAE,MAAM,EAAE,QAAQ,EAAE,mBAAmB,CAAE,CAAC;IACxD,MAAM,QAAQ,CAAE,MAAM,EAAE,QAAQ,EAAE,qBAAqB,CAAE,CAAC;IAE1D,MAAM,8BAA8B,CAAE,MAAM,CAAE,CAAC;IAC/C,MAAM,eAAe,CAAE,MAAM,EAAE,OAAO,CAAE,CAAC;IACzC,MAAM,uBAAuB,CAAE,MAAM,CAAE,CAAC;IAExC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;IAEtB,MAAe,CAAC,YAAY,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;IAElD,MAAM,QAAQ,CAAE,MAAM,EAAE,QAAQ,EAAE,oBAAoB,CAAE,CAAC;IACzD,MAAM,QAAQ,CAAE,MAAM,EAAE,QAAQ,EAAE,kBAAkB,CAAE,CAAC;IAEvD,MAAM,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAE,MAAM,CAAE,CAAC;AAEhD,CAAC,CAAC","sourcesContent":["import { ComponentOptions, ComponentConstructor } from '../declarations';\nimport { initializePropertyToAttributes, addRemoveEventListeners } from '../decorators';\nimport { updateComponent, safeCall } from '../component';\nimport { defer } from '../utilities';\nimport { IS_DISCONNECTING, ON_READY_RESOLVED } from '../constants';\n\nexport const connectedCallback = async( target: ComponentConstructor, options: ComponentOptions, instance: any ) => {\n\n    target[ON_READY_RESOLVED] = defer<any>();\n\n    // Check if target is disconnecting and wait with init when component is fully disconnected.\n    if( target[IS_DISCONNECTING] ) {\n        await target[IS_DISCONNECTING].promise;\n    }\n\n    await safeCall( target, instance, 'connectedCallback' );\n    await safeCall( target, instance, 'componentWillLoad' );\n    await safeCall( target, instance, 'componentWillRender' );\n\n    await initializePropertyToAttributes( target );\n    await updateComponent( target, options );\n    await addRemoveEventListeners( target );\n\n    target.connected = true;\n\n    ( target as any ).setAttribute('initialized', '');\n\n    await safeCall( target, instance, 'componentDidRender' );\n    await safeCall( target, instance, 'componentDidLoad' );\n\n    target[ON_READY_RESOLVED].resolve( target );\n\n};"]}