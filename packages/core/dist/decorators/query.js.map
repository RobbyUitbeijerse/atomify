{"version":3,"file":"query.js","sourceRoot":"","sources":["../../src/decorators/query.ts"],"names":[],"mappings":"AAEA;;;;;EAKE;AACF,SAAS,MAAM,CAAE,QAAgB,EAAE,WAAoB,KAAK,EAAE,MAAoB;IAE9E,OAAO,CAAE,cAAsB,EAAE,YAAyB,EAAQ,EAAE;QAEhE,MAAM,UAAU,GAAG;YAEf,GAAG;gBAEC,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gBAExD,OAAO,CAAE,QAAQ,CAAE;oBACf,CAAC,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,CAAC;oBAC1C,CAAC,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAEhD,CAAC;YAED,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SAErB,CAAC;QAEF,OAAO,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;IAE3E,CAAC,CAAC;AAEN,CAAC;AAED;;;EAGE;AACF,MAAM,CAAC,MAAM,KAAK,GAAG,CAAE,QAAgB,EAAE,MAAoB,EAAG,EAAE;IAE9D,OAAO,MAAM,CAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAE,CAAC;AAE7C,CAAC,CAAC;AAEF;;;EAGE;AACF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAE,QAAgB,EAAE,MAAoB,EAAG,EAAE;IAEjE,OAAO,MAAM,CAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAE,CAAC;AAE5C,CAAC,CAAC","sourcesContent":["import { RenderRoot, QueryTarget } from '../declarations';\n\n/**\n * Queries the render root ( this or the shadowdom ) from a custom element\n * And binds the selector to the custom element.\n * @param selector\n * @param queryAll\n*/\nfunction select( selector: string, queryAll: boolean = false, target?: QueryTarget ) {\n\n    return ( propertyTarget: Object, propertyName: PropertyKey ): any => {\n\n        const descriptor = {\n\n            get( this: RenderRoot ) {\n\n                const targetElement = target ? target : this.renderRoot;\n\n                return ( queryAll )\n                    ? targetElement.querySelectorAll(selector)\n                    : targetElement.querySelector(selector);\n\n            },\n\n            enumerable: true,\n            configurable: true,\n\n        };\n\n        return Object.defineProperty(propertyTarget, propertyName, descriptor);\n\n    };\n\n}\n\n/**\n * Queries and returns a single element.\n * @param selector name of the selector that has to be queried.\n*/\nexport const Query = ( selector: string, target?: QueryTarget ) => {\n\n    return select( selector, false, target );\n\n};\n\n/**\n * Queries and returns a list of dom elements.\n * @param selector name of the selector that has to be queried\n*/\nexport const QueryAll = ( selector: string, target?: QueryTarget ) => {\n\n    return select( selector, true, target );\n\n};"]}