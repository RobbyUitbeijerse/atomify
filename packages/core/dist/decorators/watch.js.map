{"version":3,"file":"watch.js","sourceRoot":"","sources":["../../src/decorators/watch.ts"],"names":[],"mappings":"AAAA,OAAO,EAAG,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAEnD;;EAEE;AACF,MAAM,CAAC,MAAM,KAAK,GAAG,CAAE,YAAoB,EAAG,EAAE;IAE5C,OAAO,CAAE,MAAW,EAAE,YAAoB,EAAG,EAAE;QAE3C,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAG;YAE1C,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;SAEtD;QAED,IAAI,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAE,YAAY,CAAE,EAAG;YAEpD,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAE,YAAY,EAAE,YAAY,CAAE,CAAC;SAE5E;aAAM;YAEH,MAAM,KAAK,CAAC,qCAAsC,YAAa,EAAE,CAAC,CAAC;SAEtE;IAEL,CAAC,CAAC;AAEN,CAAC,CAAC","sourcesContent":["import {  WATCHED_PROPERTIES } from '../constants';\n\n/**\n    * The @Watch decorators validates the prop and triggers the method with the old and the new value.\n*/\nexport const Watch = ( propertyName: string ) => {\n\n    return ( target: any, functionName: string ) => {\n\n        if( !target.constructor[WATCHED_PROPERTIES] ) {\n\n            target.constructor[WATCHED_PROPERTIES] = new Map();\n\n        }\n\n        if( target.constructor.properties.has( propertyName ) ) {\n\n            target.constructor[WATCHED_PROPERTIES].set( propertyName, functionName );\n\n        } else {\n\n            throw Error(`Watcher: can't find property name ${ propertyName }`);\n\n        }\n\n    };\n\n};"]}