{"version":3,"file":"apply-attributes.js","sourceRoot":"","sources":["../../src/core/apply-attributes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;AAE/C,MAAM,CAAC,MAAM,eAAe,GAAG,CAAE,OAAY,EAAE,SAAiB,EAAG,EAAE;IAEjE,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAE,SAAS,IAAI,EAAE,CAAE,CAAC;IAElD,IAAI,eAAe,CAAE,OAAO,CAAE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAG;QAEpD,OAAO,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;KAElC;IAED,UAAU,CAAC,OAAO,CAAC,CAAE,SAAS,EAAG,EAAE;QAE/B,MAAM,IAAI,GAAI,SAAoC,CAAC;QAEnD,IAAI,IAAI,KAAK,OAAO,EAAG;YAEnB,MAAM,CAAC,MAAM,CAAE,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,CAAE,CAAA;SAElD;aAAM,IAAK,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,WAAW,EAAG;YAEnD,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,CAAE,CAAC;SAEnD;aAAM,IAAK,IAAI,KAAK,SAAS,EAAG;YAE7B,OAAO,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;SAEhD;aAAM,IAAO,IAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAG;YAEjD,MAAM,SAAS,GAAK,IAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7D,OAAO,CAAC,gBAAgB,CAAE,SAAS,EAAE,SAAS,CAAC,IAAI,CAAC,CAAE,CAAC;SAE1D;aAAM,IAAI,eAAe,CAAE,OAAO,CAAE,IAAI,CAAG,IAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAG;YAEzE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAE,IAAI,CAAE,EAAG;gBAElC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAE,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAE,CAAC;aAEnD;SAEJ;aAAM;YAEH,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;SAE/C;IAEL,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AAEnB,CAAC,CAAC","sourcesContent":["import { isCustomElement } from '../utilities';\n\nexport const applyAttributes = ( element: any, vnodeData: object ) => {\n\n    const attributes = Object.keys( vnodeData || {} );\n\n    if( isCustomElement( element ) && !element.__jsxProps ) {\n\n        element.__jsxProps = new Map();\n\n    }\n\n    attributes.forEach(( attribute ) => {\n\n        const prop = (attribute as keyof typeof vnodeData);\n\n        if( prop === 'style' ) {\n\n            Object.assign( element.style, vnodeData[prop] )\n\n        } else if ( prop === 'class' || prop === 'className' ) {\n\n            element.setAttribute('class', vnodeData[prop] );\n\n        } else if ( prop === 'htmlFor' ) {\n\n            element.setAttribute('for', vnodeData[prop]);\n\n        } else if ( ( prop as string ).indexOf('on') === 0 ) {\n\n            const eventName = ( prop as string ).substr(2).toLowerCase();\n            element.addEventListener( eventName, vnodeData[prop] );\n\n        } else if( isCustomElement( element ) && !( prop as string ).includes('-') ) {\n\n            if( !element.__jsxProps.has( prop ) ) {\n\n                element.__jsxProps.set( prop, vnodeData[prop] );\n\n            }\n\n        } else {\n\n            element.setAttribute(prop, vnodeData[prop]);\n\n        }\n\n    });\n\n    return element;\n\n};"]}